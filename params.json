{"name":"Fryr","tagline":"Command window.location.hash like a cook in a kitchen","body":"# Fryr\r\n\r\n[![Build Status](https://travis-ci.org/wearefine/fryr.svg?branch=master)](https://travis-ci.org/wearefine/fryr) [![Code Climate](https://codeclimate.com/github/wearefine/fryr/badges/gpa.svg)](https://codeclimate.com/github/wearefine/fryr)\r\n\r\nFryr is the fry cook you never knew you needed to turn that ugly, frozen hash into pretty, delectably digestable params. Not only does it make params accessible for use on the client-side, it also adds, removes, and updates them.\r\n\r\n```javascript\r\n// ...com/#?tankhood=gill,deb,bloat\r\n\r\nvar fry = new Fryr(callback);\r\nfry.params;\r\n// => { 'tankhood' : 'gill,deb,bloat' }\r\n\r\nfry.update('tankhood', 'nemo');\r\n// => ...com/#?tankhood=gill,deb,bloat,nemo\r\n```\r\n\r\n## Quick Start\r\n\r\n1. `//= require fryr`\r\n1. Call `new Fryr` with a callback function\r\n1. PROFIT BYAH\r\n\r\n## Initialization\r\n\r\n| Arg | Type | Default | Description |\r\n|---|---|---|---|\r\n| `hashChangeCallback` | function | | Called on every hashchange (first argument is the updated params) |\r\n| `defaults` | object | `{}` | Key/value pairs for values that should be added on init. Pass `{}` to skip to next argument |\r\n| `call_on_init` | boolean | `true` | Execute callback on initialization. Always true if defaults is supplied |\r\n\r\nThe `hashChangeCallback` executes everytime the hash is changed. Commonly, this function updates the view and regenerates filtered items, uncommonly, it is used to print frustrated messages to the console, and very rarely it is used to sort the recyclables. It accepts one argument - the new params (as an object) that have been parsed.\r\n\r\n**Example**\r\n\r\n```javascript\r\nfunction myFilteringCallbackFunction(params) {\r\n  console.table(params);\r\n};\r\nvar fry = new Fryr(myFilteringCallbackFunction);\r\n```\r\n\r\n## Functions\r\n\r\n\r\n### `.update`\r\n\r\n| Arg | Type | Default | Description |\r\n|---|---|---|---|\r\n| `key` | string |  | param key to query against |\r\n| `value` | mixed |  | value for param key |\r\n| `key_is_required` | boolean | `false` | if the key is not required, it will be removed from the hash |\r\n\r\nThe meat and potatoes of Fryr, this modifies the hash to your explicit purposes.\r\n\r\n#### Examples\r\n\r\n**Add a key**\r\n\r\n```javascript\r\nfry.update('character', 'marlin');\r\n// => ...com/#?character=marlin\r\n```\r\n\r\n**Add a different key**\r\n\r\n```javascript\r\n// /#?character=marlin\r\nfry.update('home', 'reef');\r\n// => /#?character=marlin&home=reef\r\n```\r\n\r\n**Replace key's value**\r\n\r\n```javascript\r\n// /#?character=marlin\r\nfry.update('character', 'nemo', false, true);\r\n// => /#?character=nemo\r\n```\r\n\r\n**Remove key**\r\n\r\n```javascript\r\n// /#?character=marlin\r\nfry.update('character', '');\r\n// => /#\r\n```\r\n\r\n**Remove value but keep key**\r\n\r\n```javascript\r\n// /#?character=marlin\r\nfry.update('character', '', true);\r\n// => /#?character=\r\n```\r\n\r\n### `.append`\r\n\r\n| Arg | Type | Default | Description |\r\n|---|---|---|---|\r\n| `key` | string |  | param key to query against |\r\n| `value` | mixed |  | value for param key |\r\n\r\nNear identical to `.update`, this function is designed to add values as a list and not be a uniform replace-value.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// /#?character=marlin\r\nfry.append('character', 'nemo');\r\n// => /#?character=marlin,nemo\r\n```\r\n\r\n### `.param`\r\n\r\n| Arg | Type | Description |\r\n|---|---|---|\r\n| `key` | string | the param to query |\r\n\r\nQuery a key in the hash directly, and don't even bother re-parsing it. In just about every instance, accessing `.params.<key>` **is the better decision here**. Returns string.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// #?can_speak_whale=dory\r\nfry.param('can_speak_whale')\r\n// => 'dory'\r\n```\r\n\r\n### `.paramPresent`\r\n\r\n| Arg | Type | Description |\r\n|---|---|---|\r\n| `key` | string | the param to query |\r\n\r\nDetermine if a param exists or has a blank value.\r\n\r\n#### Examples\r\n\r\n```javascript\r\n// #?boat=touched\r\nfry.paramPresent('boat');\r\n// => true\r\n\r\n// #?boat=\r\nfry.paramPresent('boat');\r\n// => false\r\n\r\n// #?bomb=touched\r\nfry.paramPresent('boat');\r\n// => false\r\n```\r\n\r\n### `.parse`\r\n\r\nUpdate Fryr's `Fryr.params` object with a fresh batch of updated key/values. This occurs on every `hashChange` event anyway, but sometimes you just want to be *that guy*. Returns object.\r\n\r\n### `.convert`\r\n\r\nTurn a JSON object into a string. Returns a string (without leading `#`) or false if the param is not an object or a string.\r\n\r\n| Arg | Type | Description |\r\n|---|---|---|\r\n| `obj` | object OR string | object to convert |\r\n\r\n#### Example\r\n\r\n```javascript\r\nvar obj = { 'support_group' : ['bruce', 'anchor', 'chum'], 'location' : 'submarine' };\r\n\r\nfry.convert(obj);\r\n// => '?support_group=bruce,anchor,chum&location=submarine'\r\n```\r\n\r\n### `.merge`\r\n\r\nWipe out or selectively replace keys and values. Returns a string but also updates the hash.\r\n\r\n\r\n| Arg | Type | Default | Description |\r\n|---|---|---|---|\r\n| `obj` | object OR string |  | query to replace |\r\n| `replace_all` | boolean | `false` | blast existing params away or replace only changed keys\r\n\r\n#### Examples\r\n\r\n```javascript\r\n\r\n// /#?destination=sydney&directions=over_the_trench\r\nvar obj = { 'directions' : 'through_the_trench' };\r\nfry.merge(obj);\r\n// => /#?destination=sydney&directions=through_the_trench\r\n```\r\n\r\n**With `replace_all`**\r\n\r\n```javascript\r\n// /#?destination=sydney\r\nvar obj = { 'directions' : 'through_the_trench' };\r\nfry.merge(obj, true);\r\n// => /#?directions=through_the_trench\r\n```\r\n\r\n### `.destroy`\r\n\r\nDestroy current initialization, unbind `hashchange` listener, and reset the hash to an empty state.\r\n\r\n| Arg | Type | Default | Description |\r\n|---|---|---|---|\r\n| `retain_hash` | boolean | `false` | preserve hash state |\r\n\r\n#### Examples\r\n\r\n```javascript\r\n// /#?destination=sydney&directions=over_the_trench\r\nfry.destroy();\r\n// => /\r\n\r\n\r\n// /#?destination=sydney&directions=over_the_trench\r\nfry.destroy(true);\r\n// => /#?destination=sydney&directions=over_the_trench\r\n```\r\n\r\n## Access\r\n\r\n### `.params`\r\n\r\nGrab the key/value hash of the parsed version of `window.location.hash`. Returns object.\r\n\r\n## Testing\r\n\r\nInstall all dependencies:\r\n\r\n```bash\r\nnpm install --save-dev\r\n```\r\n\r\n* `npm test` provides a quick, one-run test as defined in [test/karma.conf.js](test/karma.conf.js)\r\n* `npm run test:dev` opens a Karma instance that watches for file changes, as defined in [test/karma.conf.js](test/local.karma.conf.js)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}